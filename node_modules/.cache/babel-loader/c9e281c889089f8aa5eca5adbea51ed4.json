{"ast":null,"code":"var Helpers = require('./helpers');\n\nvar Faker = require('../index');\n\nvar definitions = require('../lib/definitions');\n\nvar address = {\n  zipCode: function zipCode() {\n    return Helpers.replaceSymbolWithNumber(Faker.random.array_element([\"#####\", '#####-####']));\n  },\n  zipCodeFormat: function zipCodeFormat(format) {\n    return Helpers.replaceSymbolWithNumber([\"#####\", '#####-####'][format]);\n  },\n  city: function city() {\n    var result;\n\n    switch (Faker.random.number(4)) {\n      case 0:\n        result = Faker.random.city_prefix() + \" \" + Faker.random.first_name() + Faker.random.city_suffix();\n        break;\n\n      case 1:\n        result = Faker.random.city_prefix() + \" \" + Faker.random.first_name();\n        break;\n\n      case 2:\n        result = Faker.random.first_name() + Faker.random.city_suffix();\n        break;\n\n      case 3:\n        result = Faker.random.last_name() + Faker.random.city_suffix();\n        break;\n    }\n\n    return result;\n  },\n  streetName: function streetName() {\n    var result;\n\n    switch (Faker.random.number(2)) {\n      case 0:\n        result = Faker.random.last_name() + \" \" + Faker.random.street_suffix();\n        break;\n\n      case 1:\n        result = Faker.random.first_name() + \" \" + Faker.random.street_suffix();\n        break;\n    }\n\n    return result;\n  },\n  //\n  // TODO: change all these methods that accept a boolean to instead accept an options hash.\n  //\n  streetAddress: function streetAddress(useFullAddress) {\n    if (useFullAddress === undefined) {\n      useFullAddress = false;\n    }\n\n    var address = \"\";\n\n    switch (Faker.random.number(3)) {\n      case 0:\n        address = Helpers.replaceSymbolWithNumber(\"#####\") + \" \" + this.streetName();\n        break;\n\n      case 1:\n        address = Helpers.replaceSymbolWithNumber(\"####\") + \" \" + this.streetName();\n        break;\n\n      case 2:\n        address = Helpers.replaceSymbolWithNumber(\"###\") + \" \" + this.streetName();\n        break;\n    }\n\n    return useFullAddress ? address + \" \" + this.secondaryAddress() : address;\n  },\n  secondaryAddress: function secondaryAddress() {\n    return Helpers.replaceSymbolWithNumber(Faker.random.array_element(['Apt. ###', 'Suite ###']));\n  },\n  brState: function brState(useAbbr) {\n    return useAbbr ? Faker.random.br_state_abbr() : Faker.random.br_state();\n  },\n  ukCounty: function ukCounty() {\n    return Faker.random.uk_county();\n  },\n  ukCountry: function ukCountry() {\n    return Faker.random.uk_country();\n  },\n  usState: function usState(useAbbr) {\n    return useAbbr ? Faker.random.us_state_abbr() : Faker.random.us_state();\n  },\n  latitude: function latitude() {\n    return (Faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);\n  },\n  longitude: function longitude() {\n    return (Faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);\n  }\n};\nmodule.exports = address;","map":null,"metadata":{},"sourceType":"script"}