{"ast":null,"code":"var Faker = require('../index');\n\nvar tree = {\n  clone: function clone(obj) {\n    if (obj == null || typeof obj != 'object') return obj;\n    var temp = obj.constructor(); // changed\n\n    for (var key in obj) {\n      temp[key] = this.clone(obj[key]);\n    }\n\n    return temp;\n  },\n  createTree: function createTree(depth, width, obj) {\n    if (!obj) {\n      throw {\n        name: \"ObjectError\",\n        message: \"there needs to be an object passed in\"\n      };\n    }\n\n    if (width <= 0) {\n      throw {\n        name: \"TreeParamError\",\n        message: \"width must be greater than zero\"\n      };\n    }\n\n    var newObj = this.clone(obj);\n\n    for (var prop in newObj) {\n      if (newObj.hasOwnProperty(prop)) {\n        var value = null;\n\n        if (newObj[prop] !== \"__RECURSE__\") {\n          value = eval(newObj[prop]);\n        } else {\n          if (depth !== 0) {\n            value = [];\n            var evalWidth = 1;\n\n            if (typeof width == \"function\") {\n              evalWidth = width();\n            } else {\n              evalWidth = width;\n            }\n\n            for (var i = 0; i < evalWidth; i++) {\n              value.push(this.createTree(depth - 1, width, obj));\n            }\n          }\n        }\n\n        newObj[prop] = value;\n      }\n    }\n\n    return newObj;\n  }\n};\nmodule.exports = tree;","map":null,"metadata":{},"sourceType":"script"}